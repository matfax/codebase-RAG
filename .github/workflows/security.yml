name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install UV and dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        uv venv
        source .venv/bin/activate
        uv pip install -e .

    - name: Install security scanning tools
      run: |
        source .venv/bin/activate
        pip install pip-audit bandit safety semgrep osv-scanner

    - name: Run pip-audit (Dependency Security)
      run: |
        source .venv/bin/activate
        pip-audit --desc --format=json --output=pip-audit-report.json --fix-summary || echo "Vulnerabilities found"

    - name: Run Safety (Known Security Database)
      run: |
        source .venv/bin/activate
        safety check --json --output=safety-report.json || echo "Safety issues found"

    - name: Run OSV Scanner (Vulnerability Database)
      run: |
        osv-scanner --format=json --output=osv-report.json . || echo "OSV vulnerabilities found"

    - name: Run Bandit (Code Security Analysis)
      run: |
        source .venv/bin/activate
        bandit -r src/ -f json -o bandit-report.json -ll || echo "Bandit issues found"

    - name: Run Semgrep (SAST)
      run: |
        source .venv/bin/activate
        semgrep --config=auto --json --output=semgrep-report.json src/ || echo "Semgrep issues found"

    - name: Analyze Docker security
      run: |
        if [ -f "Dockerfile" ]; then
          echo "Analyzing Dockerfile..."
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          ./hadolint Dockerfile --format json > hadolint-report.json || echo "Dockerfile issues found"
        fi

        if [ -f "docker-compose.yml" ]; then
          echo "Analyzing docker-compose.yml..."
          # Basic docker-compose security check
          python3 -c "
        import yaml
        import json
        try:
            with open('docker-compose.yml', 'r') as f:
                compose = yaml.safe_load(f)

            issues = []
            for service_name, service in compose.get('services', {}).items():
                # Check for privileged mode
                if service.get('privileged', False):
                    issues.append(f'Service {service_name} runs in privileged mode')

                # Check for host network mode
                if service.get('network_mode') == 'host':
                    issues.append(f'Service {service_name} uses host network mode')

                # Check for exposed ports
                ports = service.get('ports', [])
                if ports:
                    issues.append(f'Service {service_name} exposes ports: {ports}')

            with open('docker-compose-security-report.json', 'w') as f:
                json.dump({'issues': issues, 'total_issues': len(issues)}, f, indent=2)

        except Exception as e:
            print(f'Error analyzing docker-compose.yml: {e}')
        "
        fi

    - name: Generate consolidated security report
      run: |
        python3 -c "
        import json
        import os
        from datetime import datetime

        reports = {}

        # Load all security reports
        report_files = [
            'pip-audit-report.json',
            'safety-report.json',
            'osv-report.json',
            'bandit-report.json',
            'semgrep-report.json',
            'hadolint-report.json',
            'docker-compose-security-report.json'
        ]

        for report_file in report_files:
            if os.path.exists(report_file):
                try:
                    with open(report_file, 'r') as f:
                        reports[report_file] = json.load(f)
                except json.JSONDecodeError:
                    reports[report_file] = {'error': 'Invalid JSON format'}
                except Exception as e:
                    reports[report_file] = {'error': str(e)}

        # Create consolidated report
        consolidated = {
            'scan_timestamp': datetime.now().isoformat(),
            'repository': '${{ github.repository }}',
            'branch': '${{ github.ref_name }}',
            'commit': '${{ github.sha }}',
            'reports': reports,
            'summary': {
                'total_tools_run': len([k for k, v in reports.items() if 'error' not in v]),
                'tools_with_errors': len([k for k, v in reports.items() if 'error' in v]),
                'report_files_generated': list(reports.keys())
            }
        }

        with open('consolidated-security-report.json', 'w') as f:
            json.dump(consolidated, f, indent=2)

        print('=== SECURITY SCAN SUMMARY ===')
        print(f'Tools run successfully: {consolidated[\"summary\"][\"total_tools_run\"]}')
        print(f'Tools with errors: {consolidated[\"summary\"][\"tools_with_errors\"]}')
        print(f'Report files: {consolidated[\"summary\"][\"report_files_generated\"]}')
        "

    - name: Check for critical vulnerabilities
      run: |
        python3 -c "
        import json
        import sys

        critical_found = False

        # Check pip-audit results
        if os.path.exists('pip-audit-report.json'):
            try:
                with open('pip-audit-report.json', 'r') as f:
                    pip_audit = json.load(f)
                if isinstance(pip_audit, list) and len(pip_audit) > 0:
                    print(f'pip-audit found {len(pip_audit)} vulnerabilities')
                    critical_found = True
            except:
                pass

        # Check bandit results
        if os.path.exists('bandit-report.json'):
            try:
                with open('bandit-report.json', 'r') as f:
                    bandit_report = json.load(f)
                high_severity = bandit_report.get('metrics', {}).get('_totals', {}).get('SEVERITY.HIGH', 0)
                if high_severity > 0:
                    print(f'Bandit found {high_severity} high severity issues')
                    critical_found = True
            except:
                pass

        if critical_found:
            print('CRITICAL SECURITY ISSUES FOUND!')
            print('Please review the security reports and fix critical vulnerabilities.')
            # Don't fail CI for now, just warn
            # sys.exit(1)
        else:
            print('No critical security vulnerabilities detected.')
        "

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.sha }}
        path: |
          *-report.json
        retention-days: 30

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          let summary = '## üîí Security Scan Summary\n\n';

          try {
            const consolidatedReport = JSON.parse(fs.readFileSync('consolidated-security-report.json', 'utf8'));
            const reportSummary = consolidatedReport.summary;

            summary += `- **Tools run successfully**: ${reportSummary.total_tools_run}\n`;
            summary += `- **Tools with errors**: ${reportSummary.tools_with_errors}\n`;
            summary += `- **Scan timestamp**: ${consolidatedReport.scan_timestamp}\n\n`;

            summary += '### üìä Security Tools Results\n\n';
            for (const [tool, result] of Object.entries(consolidatedReport.reports)) {
              const status = result.error ? '‚ùå Error' : '‚úÖ Completed';
              summary += `- **${tool}**: ${status}\n`;
            }

            summary += '\nüìÅ Detailed security reports are available in the workflow artifacts.';

          } catch (error) {
            summary += '‚ùå Error generating security summary. Check workflow logs for details.';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
