name: Agentic-RAG CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      redis:
        image: redis:7.2
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      qdrant:
        image: qdrant/qdrant:v1.9.0
        ports:
          - 6333:6333
        env:
          QDRANT__SERVICE__HTTP_PORT: 6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .
        uv pip install pytest pytest-cov pytest-asyncio ruff black mypy

    - name: Code quality checks
      run: |
        source .venv/bin/activate
        ruff check src/ tests/ --fix
        black --check src/ tests/
        mypy src/ --ignore-missing-imports

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/localhost/6379; do sleep 1; done'
        timeout 60 bash -c 'until curl -f http://localhost:6333/health; do sleep 1; done'

    - name: Run tests with coverage
      env:
        REDIS_URL: redis://localhost:6379
        QDRANT_URL: http://localhost:6333
        PYTHONPATH: ${{ github.workspace }}
      run: |
        source .venv/bin/activate
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=90

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Performance regression test
      env:
        REDIS_URL: redis://localhost:6379
        QDRANT_URL: http://localhost:6333
      run: |
        source .venv/bin/activate
        python -c "
        import time
        import sys
        sys.path.append('.')

        # Basic performance benchmark
        start_time = time.time()
        try:
            from src.services.cache_service import get_cache_service
            print('Cache service import: OK')
        except Exception as e:
            print(f'Cache service import failed: {e}')

        try:
            from src.services.indexing_service import IndexingService
            indexing = IndexingService()
            print('IndexingService creation: OK')
        except Exception as e:
            print(f'IndexingService creation failed: {e}')

        end_time = time.time()
        print(f'Basic services initialization time: {end_time - start_time:.2f}s')

        if end_time - start_time > 5.0:
            print('WARNING: Services taking too long to initialize')
            sys.exit(1)
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t agentic-rag:test .

    - name: Test Docker container
      run: |
        docker run --rm -d --name test-container agentic-rag:test
        sleep 5
        docker logs test-container
        docker stop test-container || true

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        pip install pip-audit bandit safety

    - name: Run pip-audit
      run: |
        pip-audit --desc --format=json --output=pip-audit-report.json || true

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          *-report.json
